**Git：代码管理工具**

Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。

Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。

Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。

1.创建新仓库：创建新文件夹，打开，然后执行 git init，以创建新的 git 仓库。

2.检出仓库：执行如下命令以创建一个本地仓库的克隆版本：git clone /path/to/repository，如果是远端服务器上的仓库，你的命令会是这个样子：git clone username@host:/path/to/repository

3.工作流：本地仓库由 git 维护的三棵“树”组成。第一个是工作目录，它持有实际文件；第二个是暂存区 Index，它像个缓存区域，临时保存改动；最后是HEAD，它指向最后一次提交的结果。

4.添加和提交：可以提出更改（把它们添加到暂存区），使用如下命令：git add <filename>git add *这是git基本工作流程的第一步；使用如下命令以实际提交改动：git commit -m "代码提交信息"
现在，改动已经提交到了HEAD，但是还没到远端仓库。

5.推送改动：改动现在已经在本地仓库的 **HEAD** 中了。执行如下命令以将这些改动提交到远端仓库：git push origin master，可以把 *master* 换成想要推送的任何分支。 

如果还没有克隆现有仓库，并欲将仓库连接到某个远程服务器，可以使用命令添加：git remote add origin <server>，能够将改动推送到所添加的服务器上去。

6.分支：分支是用来将特性开发绝缘开来的。在创建仓库的时候，*master* 是“默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。创建一个叫做“feature_x”的分支，并切换过去：git checkout -b feature_x，切换回主分支：git checkout maste，再把新建的分支删掉：git branch -d feature_x，除非将分支推送到远端仓库。

7.标签：为软件发布创建标签是推荐的。可以执行如下命令创建一个叫做 *1.0.0* 的标签：git tag 1.0.0 1b2e1d63ff，1b2e1d63ff是你想要标记的提交 ID 的前 10 位字符。可以使用下列命令获取提交 ID：
git log，也可以使用少一点的提交 ID 前几位，只要它的指向具有唯一性。

8.替换本地改动：假如你操作失误（当然，这最好永远不要发生），你可以使用如下命令替换掉本地改动：git checkout -- <filename>，此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：git fetch origin，git reset --hard origin/master。

9.

内建的图形化 git：gitk

彩色的 git 输出：git config color.ui true

显示历史记录时，每个提交的信息只显示一行：git config format.pretty oneline

交互式添加文件到暂存区：git add -i

**Git中常用快捷键**

1、bash命令格式

命令 [-options][参数]，如：tar  zxvf  demo.tar.gz

查看帮助：命令 --help

2、bash常见命令

pwd (Print Working Directory) 查看当前目录

cd (Change Directory) 切换目录，如 cd /etc

ls (List) 查看当前目录下内容，如 ls -al

mkdir (Make Directory) 创建目录，如 mkdir blog

touch 创建文件，如 touch index.html

cat 查看文件全部内容，如 cat index.html

more/less 查看文件，如more /etc/passwd、less /etc/passwd

rm (remove) 删除文件，如 rm index.html、rm -rf  blog

rmdir (Remove Directory) 删除文件夹，只能删除空文件夹，不常用

mv (move) 移动文件或重命名，如 mv index.html ./demo/index.html

cp (copy) 复制文件，cp index.html ./demo/index.html

head 查看文件前几行，如 head -5 index.html

tail 查看文件后几行 –n –f，如 tail index.html、tail -f -n 5 index.html

tab 自动补全，连按两次会将所有匹配内容显示出来

history 查看操作历史

\> 和 >>重定向，如echo hello world! > README.md，>覆盖 >>追加

whoami 查看当前用户
